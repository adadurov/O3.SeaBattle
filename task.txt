1) /create-matrix (POST)
request: {"range": int} 
создает матрицу дл€ игры в морской бой
range - число, размер пол€ дл€ игры в морской бой,  если равно 5 то поле будет выгл€деть как 
 A B C D E
1
2
3
4
5

2) /ship (POST) 
request: {"Coordinates": string}
Coordinates - это список координат кораблей на этом поле. ¬ыгл€дит как "1A 2B,3D 3E". «десь зап€тыми разделены координаты 1 корабл€. 1A 2B = 1A - левый верхний угол корабл€, 2B - правый нижний угол корабл€, корабли могут быть квадратными, пр€моугольными
≈сли корабли выход€т за границы координатной сетки - возвращает 400 ошибку
на матрицу корабли можно поставить только 1 раз, повторное построение матрицы - только после очистки либо завершени€ предыдущей игры (все корабли утоплены)

3) /shot (POST)
request: {"сoord": string}
сoord -  оординаты, по которым был произведен выстрел. ¬ыгл€дит как "1A", "2A" и так далее
¬озвращает структуру
{
	"destroy":bool,
	"knock":bool,
	"end":bool
}

в случае повторного выстрела по тем же координатам - возвращает 400 с сообщением об ошибке
в случае попадани€ и незатоплени€ корабл€ - {"destroy":false,"knock":true,"end":false}, при потоплении {"destroy":true,"knock":true,"end":false},
если утоплен последний корабль - {"destroy":true,"knock":true,"end":true}
при выстреле после утоплени€ всех кораблей - вернуть ошибку

4) /clear (POST)
метод очищает предыдущую игру

5) /state (GET)
метод возвращает статистику игры
response:
{
	"ship_count":int, // всего кораблей
	"destroyed" :int, // потоплено
	"knocked"   :int, // подбито
	"shot_count":int  // сделано выстрелов
}
